{"version":3,"sources":["Component/Header.js","Container/MainPage.js","Component/About.js","Container/ContentPage.js","App.js","serviceWorker.js","index.js","Image/main.jpg"],"names":["Header","props","Head","Layout","style","width","height","position","zindex","transition","top","background","GithubOutlined","onClick","window","open","fontSize","paddingRight","mode","float","borderBottom","paddingLeft","map","item","index","Item","textDecoration","MainPage","Content","zIndex","maxHeight","padding","display","backgroundSize","backgroundPosition","backgroundColor","opacity","left","backgroundImage","img","Step","Steps","step","title","content","margin","textAlign","current","key","className","marginTop","border","borderradius","backgroundcolor","minheight","textalign","paddingtop","ContentPage","paddingBottom","About","App","overflow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.bb48fe4d.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { GithubOutlined } from '@ant-design/icons';\nfunction Header(props) {\n  const { Header: Head } = Layout;\n\n  return (\n    <Layout>\n      {/* <Head style={{ position: 'static', width: '100%', left: 0, top: 0, right: 0, zindex: 1000, background: '#fff', height:'65px' }}> */}\n      <Head style={{ width: '100%', height: '65px', position: 'absolute', zindex: '10000', transition: 'background 0.3s ease-in 0s', top: 0, background: 'rgba(255,255,255,0.0)' }}>\n        <GithubOutlined onClick={() => {\n          window.open('https://github.com/KimNamKyu')\n        }}\n          style={{ fontSize: '24px', paddingRight: '30px' }} />\n        <span style={{fontSize: '24px'}}>Southkyu PortFolio</span>\n        <Menu mode=\"horizontal\" style={{ float: 'right', borderBottom: '#fff', paddingLeft: '15px', background: 'rgba(255,255,255,0.0)', fontSize: '18px' }}>\n          {['Home', 'About', 'Skill', 'Project'].map((item, index) => (\n            <Menu.Item style={{textDecoration: \"underline\"}}>{item}</Menu.Item>\n          ))}\n        </Menu>\n      </Head>\n    </Layout>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { Layout } from 'antd';\nimport img from '../Image/main.jpg'\nfunction MainPage(props) {\n  const { Content } = Layout\n  return (\n    <div style={{ position: \"fixed\", width: '100%', top: 0, zIndex: 0 }}>\n      <Layout style={{ position: 'relative', maxHeight: 'none!important' }}>\n        <Content style={{ padding: 0, display: 'block', backgroundSize: 'cover', backgroundPosition: '50% 50%' }}>\n          <div style={{ height: '946px', padding: 0, display: 'block', backgroundColor: '#000', opacity: .3, top: 0, left: 0, width: '100%', position: 'absolute', backgroundImage: `url(${img})` }}>\n          </div>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default MainPage;","import React from 'react';\nimport { Layout, Steps } from 'antd';\n\nfunction MainPage(props) {\n    const { Content } = Layout\n    const { Step } = Steps\n    const step = [\n        {\n            title: 'First',\n            content: 'First-content',\n        },\n        {\n            title: 'Second',\n            content: 'Second-content',\n        },\n        {\n            title: 'Last',\n            content: 'Last-content',\n        },\n        {\n            title: 'Last',\n            content: 'Last-content',\n        },\n    ]\n    return (\n        <Content style={{ height: '946px', background: '#fff', padding: \"100px 50px 100px 50px\", margin: '0 auto', width: '80%' }}>\n            <h2 style={{textAlign:'center', fontSize: '38px'}}>Career</h2>\n            <Steps current={0}>\n                {step.map(item => (\n                    <Step key={item.title} title={item.title} />\n                ))}\n            </Steps>\n\n            <div className=\"steps-content\" style={{\n                marginTop: '16px',\n                border: '1px dashed #e9e9e9',\n                borderradius: '2px',\n                backgroundcolor: '#fafafa',\n                minheight: '200px',\n                textalign: 'center',\n                paddingtop: '80px'\n            }}>{step[0].content}</div>\n\n\n        </Content>\n    );\n}\n\nexport default MainPage;\n\n","import React from 'react';\nimport { Layout } from 'antd';\nimport About from '../Component/About';\nfunction ContentPage(props) {\n    const { Content } = Layout\n    return (\n        <div style={{ position: 'relative',background: '#fff', marginTop: '897px', paddingBottom: '54px' }}>\n            <Layout>\n                <About />\n            </Layout>\n        </div>\n    );\n}\n\nexport default ContentPage;","import React from 'react';\nimport Header from './Component/Header';\nimport \"./App.css\";\nimport 'antd/dist/antd.css';\nimport MainPage from './Container/MainPage';\nimport ContentPage from './Container/ContentPage';\nfunction App() {\n  return (\n    <div style={{ overflow: 'hidden' }}>\n      <MainPage />\n      <Header />\n      <ContentPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/main.833bbfcb.jpg\";"],"sourceRoot":""}