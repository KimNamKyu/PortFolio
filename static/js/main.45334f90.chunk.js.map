{"version":3,"sources":["Component/Header.js","Component/About.js","Component/Profile.js","Component/Content.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","menuButton","marginRight","spacing","hide","drawer","width","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","Header","props","classes","useTheme","React","useState","open","setOpen","window","AppBar","position","Toolbar","style","backgroundColor","borderBottom","IconButton","color","aria-label","onClick","edge","className","clsx","Drawer","variant","anchor","paper","direction","Divider","List","map","text","index","ListItem","button","key","ListItemText","primary","heroContent","palette","background","About","Fragment","CssBaseline","Container","maxWidth","Typography","align","Profile","btn","margin","border","borderradius","Content","textAlign","paddingTop","Button","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45334f90.chunk.js","sourcesContent":["// import React from 'react';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n// import {AppBar,Toolbar,Hidden ,Drawer,IconButton, ListItem, ListItemText, List, Divider} from '@material-ui/core';\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display:'block'\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n      <Toolbar style={{backgroundColor:'#fff', borderBottom: '1px solid #ddd'}}>\r\n        <IconButton \r\n         color=\"black\" \r\n         aria-label=\"open drawer\"\r\n         onClick={handleDrawerOpen}\r\n         edge=\"start\"\r\n         className={clsx(classes.menuButton, open && classes.hide)}\r\n        >\r\n        <MenuIcon style={{color:'black'}}/>\r\n        </IconButton>\r\n      </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {['Home', 'About', 'Skill', 'Project'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Container, Typography, CssBaseline } from '@material-ui/core';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    }\r\n}));\r\n\r\nfunction About() {\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n                <div className={classes.heroContent}>\r\n                    <Container maxWidth=\"sm\">\r\n                        <Typography variant=\"h5\" align=\"center\">\r\n                            ABOUT ME\r\n                        </Typography>\r\n                    </Container>\r\n                </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction Profile () {\r\n    return (\r\n        <div>\r\n            <Typography><h2> {`>`} 경력사항</h2></Typography>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Container, Typography, CssBaseline, ButtonGroup, Button } from '@material-ui/core';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport About from './About';\r\nimport Profile from './Profile';\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6)\r\n    },\r\n    btn:{\r\n        margin: '0 10px',\r\n        padding: '7px 15px 6px',\r\n        border: '1px solid #EEE',\r\n        borderradius: '25px'\r\n    }\r\n}));\r\n\r\nfunction Content() {\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <main>\r\n                <About/>\r\n                <div className={classes.heroContent}>\r\n                    <Container maxWidth=\"sm\">\r\n                        <Typography variant=\"h5\" align=\"center\">\r\n                            content\r\n                        </Typography>\r\n                        <div style={{textAlign:'center', paddingTop:'50px'}}>\r\n                            <Button variant=\"contained\" className={classes.btn}>Profile</Button>\r\n                            <Button className={classes.btn}>Skill</Button>\r\n                            <Button className={classes.btn}>Project</Button>\r\n                        </div>\r\n                        <Profile/>\r\n                    </Container>\r\n                </div>\r\n            </main>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport Header from './Component/Header';\r\nimport Content from './Component/Content';\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <Content/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}